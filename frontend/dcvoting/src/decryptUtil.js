// const paillierBigint = require('paillier-bigint');
// const fs = require('fs');

// async function decryptTally(encryptedSumStrings) {
//   const privData = JSON.parse(fs.readFileSync('private.json'));
//   const publicKey = new paillierBigint.PublicKey(BigInt(privData.publicKey.n), BigInt(privData.publicKey.g));
//   const privateKey = new paillierBigint.PrivateKey(
//     BigInt(privData.lambda),
//     BigInt(privData.mu),
//     publicKey
//   );

//   for (let i = 0; i < encryptedSumStrings.length; i++) {
//     const productParts = encryptedSumStrings[i].split("*");
//     let total = 1n;
//     const n2 = publicKey.n ** 2n;

//     for (let part of productParts) {
//       if (part.trim() === '') continue;
//       total = (total * BigInt(part)) % n2;
//     }

//     const decrypted = await privateKey.decrypt(total);
//     console.log(`🗳️ Candidate ${i} received ${decrypted} votes`);
//   }
// }

// // Load encrypted strings manually from smart contract's encryptedSums for each candidate
// // decryptTally([
// //   "1*ENC1*ENC2", // Replace with actual values from getEncryptedSum(0)
// //   "1*ENC3*ENC4",
// //   "1*ENC5"
// // ]);


// decryptTally(
//     ["1*16737913496491872381465571943188556724018387355670685341583073156981564619120745043965713079780041480671486708070582639399105180459835670677063847794536398086080933999360727878982105981949866218524510270529014404369140636458065060420351755515752115766028012615387816774442140631808258265366271524619762515202409279029587382408886390970206287162850019334634989976453843339522332964049820222313860284268619637852388446772640618289450626713609872820277670808332209697872306243737900316762891079549544023505509250039103910411254795179937104283591598385074351451688048017881064222245660112321795146268502979386012966947396980811703074901346823475561559285404571449164771989087999761607113021719488270992266595189731295577556270251972321549104092648632616851465120095944827402680438297402965156600448712984773794638560837433293222257109244030141616945318639109416327508987127725050797339136573047271962356183807396867577266142060113740825359719799357630009661252252473885078901836721453336807371134128649437758523824519503154660350365232797730603460933731279436463802872885677110821869135171670706406375792928299676177494252739476340199017411453822151808886398795272909676638562901909575651142912148761475784677859563993439900170378474378*344173093616978646009220509148731879010589215508046090956704754565631231153591273689416664123515921345768359199668816983922737826066559874124211558618892011201874118480856002569084045977324073546767565420407731230348429031852450135592318837370854384665490898398898293389180951258502815684283117367704331541762271564147541391755730134886492407017352812194074496938953451709196036704290412326696056916456203860886546075459038004082476454443573844298432303868087642130505255021759313300977976778268474276460250380630888824862263261405073956564802530930820106223461852999003214800767650190477300017794794742575724446404448781566852698075655643167283356609026241103079661741146432142587928696441022176611288965849842698333530961460559391313955640507080856439526343795035293835194361092533009816166669852853259940089828613464338445782795262554265570141586260312946326404257632177581438190748332464246461535091826244559191879178725087648010347020176575004175234945938955557987766299965694622542646970916986741972669923631332917335287496100423908317265280040666232335505229125711053961931091225465154553868449118115481483999047096746618255793425532316254232388613948997361511147712527326712142499963005623902905715751019047969655360194237436","1*408425777011128815520690938894818322234307713350492877783335383703644809896057241528873527962630974734014393831758567347010763127747547507840204247480994810693096040475832691387031101278738612797024874060826995537128037799386949573552535814016181794288735552361818942615977500057298910464085395952451387468015887683634590787662796941911508472189151868009327390022135391448715487239958936325143831924669506823612420548906602959853943477067727017258868080096860384093560016140269444501873001033694416549010449107954011698080195139732645247060865569685736772073089335662061730886028174871320298690322553212588164975882903541142654222113732062888029140320677737121285862560725972328164535804817503548960868176058278012691627106736898431636184563889119181747122322414185334620708688701584999890714261534966381308858138067962328924135885878966190022327266153547648441228265269904118192744229982763419390684124839182120706401104225605760841508036511414659429235039922824400626815962933002837878437854660770828283500820780000006871748822058389511459592089475154337526992559033801591204695584439094881119554083764909822761069623257034209743139229721846110969335674951086810374622566816965986311945222599136736008280749899528367855414200758955*7152593170671406753945502410946651466568518177270025225622908029512368319306856206743035361068295133880753462712803876411509131811104623167319030188773876189121862777471537324715541730749124027412614593865321739586017942509245601912825391089407302712762737083622236980007684429826542051519526691135798892223710911096352740905256351307334763742198834193963981187160537374517719218028505161706515635981752315800124966041491559719747575677223910892598159596083407070978479613395006756901536052831404850495153218253396487993631256801372715640702236862196858198616701303050696595738650495666267569395476245070375456046249988389898217450967990752892424721063104755438899540068281601100715647793214966038077676603089509934278421711495815717168841379209813135209602297578488807136931743906998457911864663606182814715100063136114992275205344261802822505168294072796415177022842050376887887262750920067506266015721738081668958248901774270894493563144698248051348193937745365999922752184114896976460408729005891587817159775531300595826940385526869803012354924583001923312854671526973838154807711613620584534201393471960868353142288993495987969469446053499612629969312317698940375884136891153410191241677947192434724515190577291341897230574068","1*565375786854352152194052954827035861936694053263982147353174859881625015411723658870305371203471949717387760588717181357560753435098622200788439830780798810147723769674662422051898917251715418812619834810727379330365940512201265798940005079631855801427684140574925997368502171114132976995917083854292207158092006355451567867275572134261817739618948039004049263037257165538197684030778648374032274513922857852618222623882217372197151130515232261892984339049870108139743988609619066236367708452943081520008165067364449270272898248118806344461181924828548216743909948932301332743315804017445439469921501963473748307813821254446304551657155820981713626148407224544678091506103700954310651035802164869277033990453098287953821992365095070326119280572283828523066325714692932195916782737897099143249440219835553387316948541287896802827643454613079208591581609099979667215044260514884425155772796952184533410894964177046907764531233568280951749223340585003837438768338686030178769476057926057426352720485332900736874362335310478966917151981177466523285181280801980005900569833999573450538122495940661450110638377861857015819345290362515914163754472793792348219039849029878493577754410957910937082609851086622418602858047995199122906487288298*108464504341129833108034008172316364616183672109317517706012221339020322043178663461307749498927019458870145453690368534479247791716931567195583094552772805847611114680285264759689062659494602961737084969555359157718264163777408285891943246847563707712291266486043529834789750464054445079269457025895294808572801838351027584650067046334558567317378412899773748893609339012842251814405963543229443100507577028667983574823445803497484356187282672068141991643596624501811561392213453561391139086916540776919683639157633070629892024316984945160938892039216624286393384368355371203916956211214852476601957999348390350718378960213193676625592809342195955526227067775845365083191791158054909066139941261851756239451928722988047700257396707459071321454975898108783038423435616784919041048289513971332925965913832801451580046274267086976577040139620057505350133108023059192195133441924109564389192343387121680088885415494814500894636129993870596546318654642869688304357509662094639209901326209803441240693592808941871236805105602517103613072854235196208421132121268597514510032244244928160839747034743965429482186289027515421299697971517412408874644323556067525310218475137036167568394467258198440346540932897876899673642053687742156692002644"]
// );






// import { createRequire } from 'module';
// const require = createRequire(import.meta.url);
// const fs = require('fs'); // Now allowed via createRequire
// const paillierBigint = require('paillier-bigint');
import  { PrivateKey, PublicKey }  from 'paillier-bigint';
export async function decryptTally(encryptedSumStrings) {
  // const privData = JSON.parse(fs.readFileSync('./src/assets/private.json', 'utf-8'));
    const privData = { "lambda": "12982295063840460210957487629690318255204255845652634441977687297520212487305261774715148643877272974134189797204943352144113729561445960055955491410407016857139886321534308853573119943422400200096815254805839071525578924145946603753785812457725792046161620607751068680102319010908037702930466733136042678579446199764949623028314125986000833558010078120340078578581618413720378554445910653024589758963318742911835590988966617865856804279962586807995843442950130092479559042275792576731395437752574868561726759878630004393165198430265495863433229927935868500134623890187144357258541434867774496293283245383416480670876",
  "mu": "1003535857153817282451879612405428939812362590344676635949274617351508145356573951414518050405441841108233280890241930722343874953746422885653176276953021483141190579072060950929318248776520955493015045621104318016952345758056019650824181337537124825705666350624396055802741085811255849796679857333901466145287538904021762259466561535251039678214310115846407004856837283908549549962448121817319585928413316012213747244489503501358131683826548643940510781847828689706970940764629854775316646998688478857642726048035774086432468596594586264491615376654649656051260443307887030044681813605595084080346755794848947909382",
  "publicKey": {
    "n": "25964590127680920421914975259380636510408511691305268883955374595040424974610523549430297287754545948268379594409886704288227459122891920111910982820814033714279772643068617707146239886844800400193630509611678143051157848291893207507571624915451584092323241215502137360204638021816075405860933466272085357159218188517617504356858429155424302049600973904754890222053862635080738689868941819370554331997930897295056207500343335686551074451291500356575663173912937495411184193388684523901858727577565888130674458432629450649727245478647491345291466333892943868188975853603316324304017695515255154122347043017561030352131",
    "g": "534827330184923679939813487188946297440854067276450204891736243501410587123306269015612141417550322448701975352665520164421695217652000833811647205080454383534531064739146187279319827261713194888575336618041202720557542369987821818860243556055868575324580343823488697442393257019434737912445777112531680959237560735964602282726262061802733467890417627189713545833832229871927763991833670798683428308981020540224628963543137839366717540810804972934309791796827240528641176616628390532118925312614183081994230349075218996460574549226193419222408695403961110534992019921198091523707190434185894147176212269514049701031950733927418010531272028200521693589044190410458247433202050622807194149058902411234136959306330352702283196229425906266888572188062091797951000992135246785592094131006732603591392132871775305988644239613884370363236666148816580884644585602465622012212431648826365548881070907718522429080971073257034255999527871635641225375367954022379657728733102339916120094246720816416363527274414849156498231542896385947446791298674268523831316076539388138032753579353972036596268097109034163100522129171545233623566583592507367614416057375739781390354913712385243765937477769501496611830134545799409077280340608354684005911017094"
  }};

  // const { PrivateKey, PublicKey } = paillierBigint;

  const publicKey = new PublicKey(
    BigInt(privData.publicKey.n),
    BigInt(privData.publicKey.g)
  );
  
  const privateKey = new PrivateKey(
    BigInt(privData.lambda),
    BigInt(privData.mu),
    publicKey
  );
  var dc = [];
  for (let i = 0; i < encryptedSumStrings.length; i++) {
    const productParts = encryptedSumStrings[i].split("*");
    let total = 1n;
    const n2 = publicKey.n ** 2n;

    for (let part of productParts) {
      if (part.trim() === '') continue;
      total = (total * BigInt(part)) % n2;
    }

    const decrypted = await privateKey.decrypt(total);
    dc.push(decrypted);
    console.log(`🗳️ Candidate ${i} received ${decrypted} votes`);
  }
  return dc;
}